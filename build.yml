stages:
- stage: build
  displayName: Build Project
  jobs:
  - job: dotnetbuild
    displayName: .NET Build
    pool:
      vmImage: ubuntu-latest
    container: mcr.microsoft.com/dotnet/core/sdk:3.1
    steps:
    - script: dotnet --version
      displayName: Check .NET Version
    - script: dotnet publish --configuration Release --output out/win --self-contained --runtime win-x64 /p:PublishSingleFile=true /p:IncludeSymbolsInSingleFile=true
      displayName: Publish Windows application
    - script: dotnet publish --configuration Release --output out/linux --self-contained --runtime linux-x64 /p:PublishSingleFile=true /p:IncludeSymbolsInSingleFile=true
      displayName: Publish Linux application
    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: out
        artifactName: distributions
- stage: publish
  displayName: Publish Application
  jobs:
  - job: publish_github
    displayName: Publish to GitHub
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: current
        artifactName: distributions
        downloadPath: $(Build.ArtifactStagingDirectory)
    - task: GitHubRelease@0
      inputs:
        gitHubConnection: github_seesharprun
        repositoryName: seesharprun/pspell
        tagSource: manual
        tag: $(Build.BuildNumber)      
        assets: $(Build.ArtifactStagingDirectory)/distributions/**/*
  - job: publish_dockerhub
    displayName: Publish to Docker GitHub
    steps:
    - task: Docker@2
      displayName: Login to Docker Hub
      inputs:
        command: login
        containerRegistry: dockerhub_sidneyandrews        
    - task: Docker@2
      displayName: Build and Push
      inputs:
        command: buildAndPush
        containerRegistry: dockerhub_sidneyandrews
        repository: seesharprun/pspell
        tags: |
          $(Build.BuildNumber)
          latest
  - job: publish_nuget
    displayName: Publish to NuGet
    pool:
      vmImage: ubuntu-latest
    container: mcr.microsoft.com/dotnet/core/sdk:3.1    
    steps:
    - script: dotnet pack --output $(Build.ArtifactStagingDirectory) -p:PackAsTool=true -p:ToolCommandName=pspell
      displayName: Package DotNet Tool    
    - task: DotNetCoreCLI@2
      inputs:
        command: push
        nugetFeedType: external
        externalEndPoint: nuget_seesharprun